//
// Copyright (C) YuqiaoZhang(HanetakaChou)
//
// This program is free software: you can redistribute it and/or modify
// it under the terms of the GNU Lesser General Public License as published
// by the Free Software Foundation, either version 3 of the License, or
// (at your option) any later version.
//
// This program is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU Lesser General Public License for more details.
//
// You should have received a copy of the GNU Lesser General Public License
// along with this program.  If not, see <https://www.gnu.org/licenses/>.
//

#ifndef _PACKED_VECTOR_SLI_
#define _PACKED_VECTOR_SLI_ 1

#if defined(__STDC__) || defined(__cplusplus)

static inline uint32_t FLOAT3_to_R15G15B2_SNORM(DirectX::XMFLOAT2 const &unpacked_input_xy, float unpacked_input_z)
{
	DirectX::XMFLOAT2 tmp_xy;
	float tmp_z;
	DirectX::XMStoreFloat2(&tmp_xy, DirectX::XMVectorScale(DirectX::XMVectorClamp(DirectX::XMLoadFloat2(&unpacked_input_xy), DirectX::XMVectorNegate(DirectX::XMVectorSplatOne()), DirectX::XMVectorSplatOne()), 16383.0F));
	tmp_z = std::copysign(1.0F, unpacked_input_z);

	int32_t element_x = (static_cast<int32_t>(tmp_xy.x) & 0x7fff);
	int32_t element_y = ((static_cast<int32_t>(tmp_xy.y) & 0x7fff) << 15);
	int32_t element_z = (static_cast<int32_t>(tmp_z) << 30);

	return static_cast<uint32_t>((element_x | element_y | element_z));
}

#elif defined(GL_SPIRV) || defined(VULKAN) || defined(HLSL_VERSION) || defined(__HLSL_VERSION)

brx_float4 R8G8B8A8_UNORM_to_FLOAT4(brx_uint packed_input)
{
	// DirectX::PackedVector::XMLoadUByteN4

	brx_uint element_x = (packed_input & 0xffu);
	brx_uint element_y = ((packed_input >> 8) & 0xffu);
	brx_uint element_z = ((packed_input >> 16) & 0xffu);
	brx_uint element_w = (packed_input >> 24);

	return brx_float4(element_x, element_y, element_z, element_w) * (1.0f / 255.0f);
}

brx_float3 R15G15B2_SNORM_to_FLOAT3(brx_uint packed_input)
{
	brx_int element_x = (brx_int((packed_input & 0x7fffu) << 17) >> 17);
	brx_int element_y = (brx_int(((packed_input >> 15) & 0x7fffu) << 17) >> 17);
	brx_int element_z = (brx_int((packed_input >> 30) << 30) >> 30);

	return brx_float3(brx_clamp(brx_float2(element_x, element_y) * (1.0f / 16383.0f), brx_float2(-1.0, -1.0), brx_float2(1.0, 1.0)), brx_sign(element_z));
}

brx_uint FLOAT3_to_R15G15B2_SNORM(brx_float3 unpacked_input)
{
	brx_float3 tmp = brx_float3(brx_clamp(unpacked_input.xy, brx_float2(-1.0, -1.0), brx_float2(1.0, 1.0)) * 16383.0f, brx_sign(unpacked_input.z));

	brx_int element_x = (brx_int(tmp.x) & 0x7fff);
	brx_int element_y = ((brx_int(tmp.y) & 0x7fff) << 15);
	brx_int element_z = (brx_int(tmp.z) << 30);

	return brx_uint(element_x | element_y | element_z);
}

brx_float4 R10G10B10A2_UNORM_to_FLOAT4(brx_uint packed_input)
{
	// DirectX::PackedVector::XMLoadUDecN4

	brx_uint element_x = (packed_input & 0x3ffu);
	brx_uint element_y = ((packed_input >> 10) & 0x3ffu);
	brx_uint element_z = ((packed_input >> 20) & 0x3ffu);
	brx_uint element_w = (packed_input >> 30);

	return brx_float4(brx_float3(element_x, element_y, element_z) * (1.0f / 1023.0f), brx_float(brx_sign(brx_int(element_w) - 1)) * 0.5 + 0.5);
}

brx_uint FLOAT4_to_R10G10B10A2_UNORM(brx_float4 unpacked_input)
{
	// DirectX::PackedVector::XMStoreUDec4

	brx_float4 tmp = brx_float4(brx_clamp(unpacked_input.xyz, brx_float3(0.0, 0.0, 0.0), brx_float3(1.0, 1.0, 1.0)) * 1023.0f, brx_sign(unpacked_input.w - 0.5f) + 1.0);

	brx_uint element_x = (brx_uint(tmp.x) & 0x3ffu);
	brx_uint element_y = ((brx_uint(tmp.y) & 0x3ffu) << 10);
	brx_uint element_z = ((brx_uint(tmp.z) & 0x3ffu) << 20);
	brx_uint element_w = (brx_uint(tmp.w) << 30);

	return brx_uint(element_x | element_y | element_z | element_w);
}

brx_float4 R10G10B10A2_SNORM_to_FLOAT4(brx_uint packed_input)
{
	// DirectX::PackedVector::XMLoadDecN4

	brx_int element_x = (brx_int((packed_input & 0x3ffu) << 22) >> 22);
	brx_int element_y = (brx_int(((packed_input >> 10) & 0x3ffu) << 22) >> 22);
	brx_int element_z = (brx_int(((packed_input >> 20) & 0x3ffu) << 22) >> 22);
	brx_int element_w = (brx_int((packed_input >> 30) << 30) >> 30);

	return brx_float4(brx_clamp(brx_float3(element_x, element_y, element_z) * (1.0f / 511.0f), brx_float3(-1.0, -1.0, -1.0), brx_float3(1.0, 1.0, 1.0)), brx_sign(element_w));
}

brx_uint FLOAT4_to_R10G10B10A2_SNORM(brx_float4 unpacked_input)
{
	// DirectX::PackedVector::XMStoreDecN4

	brx_float4 tmp = brx_float4(brx_clamp(unpacked_input.xyz, brx_float3(-1.0, -1.0, -1.0), brx_float3(1.0, 1.0, 1.0)) * 511.0f, brx_sign(unpacked_input.w));

	brx_int element_x = (brx_int(tmp.x) & 0x3ff);
	brx_int element_y = ((brx_int(tmp.y) & 0x3ff) << 10);
	brx_int element_z = ((brx_int(tmp.z) & 0x3ff) << 20);
	brx_int element_w = (brx_int(tmp.w) << 30);

	return brx_uint(element_x | element_y | element_z | element_w);
}

brx_float2 R16G16_UNORM_to_FLOAT2(brx_uint packed_input)
{
	// DirectX::PackedVector::XMLoadUShortN2

	brx_uint element_x = (packed_input & 0xffffu);
	brx_uint element_y = (packed_input >> 16);

	return brx_float2(element_x, element_y) * (1.0f / 65535.0f);
}

brx_uint FLOAT2_to_R16G16_UNORM(brx_float2 unpacked_input)
{
	// DirectX::PackedVector::XMStoreUShortN2

	brx_float2 tmp = brx_clamp(unpacked_input, brx_float2(0.0, 0.0), brx_float2(1.0, 1.0)) * 65535.0f + brx_float2(0.5f, 0.5f);

	brx_uint element_x = (brx_uint(tmp.x) & 0xffffu);
	brx_uint element_y = (brx_uint(tmp.y) << 16);

	return brx_uint(element_x | element_y);
}

brx_float2 R16G16_SNORM_to_FLOAT2(brx_uint packed_input)
{
	// DirectX::PackedVector::XMLoadShortN2

	brx_int element_x = (brx_int((packed_input & 0xffffu) << 16) >> 16);
	brx_int element_y = (brx_int(((packed_input >> 16) & 0xffffu) << 16) >> 16);

	return brx_clamp(brx_float2(element_x, element_y) * (1.0f / 32767.0f), brx_float2(-1.0, -1.0), brx_float2(1.0, 1.0));
}

brx_uint FLOAT2_to_R16G16_SNORM(brx_float2 unpacked_input)
{
	// DirectX::PackedVector::XMStoreShortN2

	brx_float2 tmp = brx_clamp(unpacked_input, brx_float2(-1.0, -1.0), brx_float2(1.0, 1.0)) * 32767.0f;

	brx_int element_x = (brx_int(tmp.x) & 0xffff);
	brx_int element_y = (brx_int(tmp.y) << 16);

	return brx_uint(element_x | element_y);
}

brx_uint2 R16G16_UINT_to_UINT2(brx_uint packed_input)
{
	// DirectX::PackedVector::XMLoadUShort4

	brx_uint element_x = (packed_input & 0xffffu);
	brx_uint element_y = (packed_input >> 16);

	return brx_uint2(element_x, element_y);
}

brx_uint4 R16G16B16A16_UINT_to_UINT4(brx_uint2 packed_input)
{
	// DirectX::PackedVector::XMLoadUShort4

	brx_uint element_x = (packed_input.x & 0xffffu);
	brx_uint element_y = (packed_input.x >> 16);
	brx_uint element_z = (packed_input.y & 0xffffu);
	brx_uint element_w = (packed_input.y >> 16);

	return brx_uint4(element_x, element_y, element_z, element_w);
}

brx_float4 R16G16B16A16_UNORM_to_FLOAT4(brx_uint2 packed_input)
{
	// DirectX::PackedVector::XMLoadUShortN4

	brx_uint element_x = (packed_input.x & 0xffffu);
	brx_uint element_y = (packed_input.x >> 16);
	brx_uint element_z = (packed_input.y & 0xffffu);
	brx_uint element_w = (packed_input.y >> 16);

	return brx_float4(element_x, element_y, element_z, element_w) * (1.0f / 65535.0f);
}

#else
#error Unknown Compiler
#endif

#endif